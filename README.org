#+TITLE: Digital Logic Lab 05 - Verilog Intro
#+MACRO: color @@html:<font color="$1">$2</font>@@

* Digital Logic Lab 05 - Verilog Intro
  :PROPERTIES:
  :CUSTOM_ID: digital-logic-lab-05---verilog-intro
  :END:

** References:
   :PROPERTIES:
   :CUSTOM_ID: references
   :END:

-  [[https://www.amazon.com/FPGA-Prototyping-Verilog-Examples-Spartan-3/dp/0470185325/][FPGA Prototyping By Verilog Examples: Xilinx Spartan-3 Version]]
-  [[http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf][Quick Reference Guide]]

** [[https://en.wikipedia.org/wiki/Transistor_count][Transistor Count of CPUs]]
   :PROPERTIES:
   :CUSTOM_ID: transistor-count-of-cpus
   :END:

| Processor                               | Year   | Transistor count   |
|-----------------------------------------+--------+--------------------|
| MOS Technology 6502                     | 1975   | 3,510              |
| Intel 8085                              | 1976   | 6,500              |
| Intel 8086                              | 1978   | 29,000             |
| Quad-core + GPU GT2 Core i7 Skylake K   | 2015   | 1,750,000,000      |
| NVIDIA GV100 Volta                      | 2017   | 21,100,000,000     |

** Commonly used HDL (Hardware Description Languages)
   :PROPERTIES:
   :CUSTOM_ID: commonly-used-hdl-hardware-description-languages
   :END:
   - Verilog
   - VHDL
   - [[https://chisel.eecs.berkeley.edu][Chisel (Constructing Hardware in a Scala Embedded Language)]]
     - Compiles to verilog or C++

** Verilog Usage
   :PROPERTIES:
   :CUSTOM_ID: verilog
   :END:
   # - It is a *H*ardware *D*escription *L*anguage.
   - A specification language
   - It is used for
     - Behavior modeling
     - Gate level modeling
     - Transistor level modeling
     - Simulation for all the modeling

# #+BEGIN_HTML
#   <!-- ### [Reserved Keywords](http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=7) -->
# #+END_HTML

# #+BEGIN_HTML
#   <!-- ### [Concurrency](http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=8) -->
# #+END_HTML

* Verilog Intro
*** Basic Building Block -- modules
    - See [[http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=12][Module Definition (page 12)]]
    #+begin_src verilog :export code
    module module_name
       #(parameter_declaration, parameter_declaration, ...) // <--- optional
       (port_declaration port_name, port_name, ...,
        port_declaration port_name, port_name, ...); // <--- if the module does not have any ports, the empty parenthesis
                                                     //      can be omitted, but the ";" should always be there.
       module_items
    endmodule
    #+end_src

    - Basic abstraction unit
    - Has input and output
      - modules that do not have IOs are used for testing only.
    - One module per verilog file (.v)
    - For example, the following is a module called ~halfadder~,
      with two input ports name ~a~, ~b~, and two output ports ~s~, ~c~

#+begin_src verilog :export code
module halfadder (input a, input b, output s, output c); // <---- module declaration always ends with a ;

endmodule // halfadder
#+end_src

You can group ports that are the same type together and write them in multiple lines
as long as you do not forget about the ending ";"

#+begin_src verilog :export code
module halfadder (input a, b,
                  output s, c); // <---- module declaration always ends with a ;

endmodule // halfadder
#+end_src

*** Procedural Blocks
    See [[http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=27][Procedural Blocks (page 27)]]
***** Types
      - *Initial* blocks process statements one time
        - Mostly used for testing.
        - Sometimes could be used for initializing variables.
      - *always* blocks are an infinite loop which process statements repeatedly.

*** Data Types:
    See [[http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=15][Data Type Declarations (page 15)]]
***** wire
      - Used outside procedural blocks
      - Used in IO ports by default
      - Interconnecting wire, connect output to input
      - Its value is driven by whatever the output it is connected to.
      - Note :: Any variable that is not declared, it is assumed to be 1-bit wire.
***** reg
      - The driver (behavior) of any ~reg~ variable must be define in the module the variable is declared.
      - Used inside procedural blocks
      - Must be declared outside procedural blocks
      - Note :: reg is *not* register. Used to be, not anymore.
      - When used in IO ports, only outputs can be declared as ~reg~
***** other types:
      There are several other types available in Verilog (see ), but we are going to stick
      with just ~wire~ and ~reg~ in this class.

    By default, IO ports are considered as ~wire~, unless ~reg~ is declared, for example:

#+begin_src verilog :export code
module halfadder (input a, b,       // a, b are implicitly declared as wire
                  output reg s, c); // s, c are explicitly declared as reg

endmodule // halfadder
#+end_src
*** Logic Values

| Logic Values                  | Description                             |
|-------------------------------+-----------------------------------------+
| {{{color(green, 0)}}}         | zero, low, or false                     |
| {{{color(green, 1)}}}         | one, high, or true                      |
| {{{color(blue, *z* or *Z*)}}} | high impedence (tri-stated or floating) |
| {{{color(red, *x* or *X*)}}}  | unknown or uninitialized or don't-care  |

*** Literal Integer Numbers
    See [[http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=11][Literal Integer Numbers (page 11)]]

| *Format*        | *Representation*                         |
|-----------------+------------------------------------------|
| value           | unsized decimal integer                  |
| size'base value | sized integer in a specific radis (base) |


#+caption: Sized integer format
| Radix      | Symbol | Legal Values                    |
|------------+--------+---------------------------------|
| Binary     | 'b     | 0, 1, x, X, z, Z, ?, _          |
| Octal      | 'o     | 0-7, x, X, z, Z, ?, _           |
| Decimal    | 'd     | 0-9, _                          |
| Hexdecimal | 'h     | 0-9, a-f, A-F, x, X, z, Z, ?, _ |


Example:

| Examples |  Size   |   Radix    | Binary Equivalent    |
|----------+---------+------------+----------------------|
|   <c>    |   <c>   |    <c>     | <l>                  |
|    10    | unsized |  decimal   | 0 ... 01010 (32-bit) |
|   'o7    | unsized |   octal    | 0 ... 00111 (32-bit) |
|   1'b1   |  1 bit  |   binary   | 1                    |
|  8'hAB   | 8 bits  | hexdecimal | 10101011             |
|  6'hF0   | 6 bits  | hexdecimal | 110000 (truncated)   |
|   6'hA   | 6 bits  | hexdecimal | 001010 (zero filled) |
|   6'bz   | 6 bits  |   binary   | zzzzzz (z filled)    |

*** Operators
    See [[http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=33][Operators (page 33)]]

    #+begin_src verilog :export code
    module halfadder (input a, b,
                      output s, c);

         assign s = a ^ b;  // <---- this is called continues assignment, s must be a "wire" type
         assign c = a & b;

    endmodule // halfadder
    #+end_src

    This is always called behavior modeling, since the xor and and operation is done using a operator.

*** Module Instances
    See [[http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=21][Module Instances (page 21)]]

    Basic syntax:
    #+begin_src
    module_name instance_name  (.port_name(signal), .port_name(signal), ... );
    #+end_src

    Example:
    #+begin_src verilog :exports code
    module fulladder (input a, b, cin,
                      output sum, cout);

       wire s1, c1, c2;

       halfadder HA1(.a(a), .b(b), .s(s1), .c(c1)); // <-------- the a, b, s, c outside the parenthesis referring to
                                                    //           the IO ports of halfadder module
       halfadder HA2(.a(s1), .b(cin), .s(sum), .c(c2));

       assign cout = c1 | c2; // and(cout, c1, c2);

    endmodule // fulladder
    #+end_src

*** Primitive Instances
    See [[http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=23][Primitive Instances (page 19)]]

    This is gate level modeling
    #+begin_src verilog
    module halfadder (input a, b,
                      output s, c);

     xor(s, a, b);  // <------- when using primitive instances output is always the first port
     and(c, a, b);

    endmodule // halfadder
    #+end_src

*** Vector bits
    See [[http://sutherland-hdl.com/pdfs/verilog_2001_ref_guide.pdf#page=16][Vector Bit Select and Part Selects (page 16)]]

| *Selection*          | *Syntax*                                             |
|----------------------+------------------------------------------------------|
| Bit Select           | vector_name [bit_number]                             |
| Constant Part Select | vector_name [bit_number : bit_number]                |
| Variable Part Select | vector_name [starting_bit_number+:part_select_width] |
|                      | vector_name [starting_bit_number+:part_select_width] |

    Example:
    #+begin_src verilog
    module ripple_adder_2bits(input [3:0] a, b,   // <--- both a and b are 2-bit
                              input cin,
                              output [3:0] sum,
                              output cout);
       assign sum = 4'hA;  // <----- sum refers to all 4-bit
       assign sum[1:0] = a[1:0] ^ b[1:0]; // <--- you can select just a part of sum
       assign sum[3-:3] = a[3:1] ^ b[3:1]; // <---- sum[3-:3] is equivalent to sum[3:1] here
    endmodule
    #+end_src
*** Testing
    #+begin_src verilog :export code
    module halfadder_test;
       reg a_in, b_in;   // <--- since we need to change inputs, they need to be declared as reg
       wire c_out, s_out; // <---- since the outputs will be driven by the halfadder instance,
                          //       they need to be declared as wire
       halfadder HA(.a(a_in), .b(b_in), .c(c_out), .s(s_out)); // <--- You need to have a instance of
                                                               //      the module you want to build
       initial
          begin
             {a_in, b_in} = 2'b00; // <--- For simplicity we are changing a_in, b_in together
             #10;                  // <--- Need to specify a delay so cat we can observe the output
                                   //      for this test case
             {a_in, b_in} = 2'b01; #10;
             {a_in, b_in} = 2'b10; #10;
             {a_in, b_in} = 2'b11; #10;
             $finish;              // <--- If you know exactly how long the testing need to run
                                   //      stop the simulation when it is done.
          end
    endmodule
    #+end_src

    You can use a for loop for testing, for example:
    #+begin_src verilog :export code
    module halfadder_test;
       reg a_in, b_in;   // <--- since we need to change inputs, they need to be declared as reg
       wire c_out, s_out; // <---- since the outputs will be driven by the halfadder instance,
                          //       they need to be declared as wire
       halfadder HA(.a(a_in), .b(b_in), .c(c_out), .s(s_out)); // <--- You need to have a instance of
                                                               //      the module you want to build
       initial
          begin
            integer i;
            for (i = 0; i <= 3; i = i + 1)
              begin
                {a_in, b_in} = i[1:0];
                #10;
              end
            $finish;
          end
    endmodule
    #+end_src


# ** Vivado
#    :PROPERTIES:
#    :CUSTOM_ID: vivado
#    :END:

# *** [[https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/vivado-design-tools/archive.html][Download Vivado 2017.2]]
#     :PROPERTIES:
#     :CUSTOM_ID: download-vivado-2017.2
#     :END:

# *** Installation
#     :PROPERTIES:
#     :CUSTOM_ID: installation
#     :END:

# -  Make sure you select the WebPACK edition (first option). It's free,
#    no license required, and has all the features we need.
# -  After installed vivado,
#    [[https://reference.digilentinc.com/reference/software/vivado/board-files][install board files]]

# *** [[https://www.xilinx.com/support/documentation/sw_manuals/xilinx2017_2/ug973-vivado-release-notes-install-license.pdf#page=5][Vivado Naming Convention]]
#     :PROPERTIES:
#     :CUSTOM_ID: vivado-naming-convention
#     :END:

# *** Creating Project
#     :PROPERTIES:
#     :CUSTOM_ID: creating-project
#     :END:

# *Note*: the following screenshots are captured with Vivado 2017.2.1,
# layout might be a bit different but you should be able find all the
# buttons in 2014 version.

# 1. Clone this assignment repo to your local machine, make sure you know
#    the path

# #+CAPTION: clone\_repo
# [[file:pics/clone_repo.png]]

# Note that the path of my assignment repo is
# =/home/zcai/repos/digital-logic-lab-05=

# 2. Create project Choose your project path and project name *DO NOT*
#    create project subdirectory. [[file:pics/startup.png]]

# when choosing path, make sure:

# -  *Uncheck* "create project subdirectory" option, *It's a MUST*
# -  Choose the path to be your assignment repository's folder

# #+CAPTION: name\_and\_path
# [[file:pics/project_name_marked.png]]

# Hardware part is not important this time, choose anything and go to
# next.

# #+CAPTION: select\_part
# [[file:pics/create_project_select_part.png]]

# 3. Add or create files
#    @@html:<!-- - All sources files, i.e. files end with .v extention, must be stored in src directory in your assignment. (If src is not there, create a folder named "src"). -->@@
#    Verilog files can be created inside or outside vivado. If you created
#    the file outside vivado, you need to add it to the project when you
#    want to use it.

# There are two different types of source files to Vivado: - Design
# source: Regular modules that can be implmeneted in hardware - Simulation
# source: Modules that strickly only used in simulation, usually these are
# just modules contain your test code.

# There is also a type of file called constraint file that specify your
# target hardware's configuration. They are not considered sources, and
# are usually provided by hardware vendors. Since we are only doing
# simulation here, we won't be need it this time.

# *For this lab, I require ALL source files, i.e. both design sources and
# simulation sources, to be placed in "src" folder of assignment folder.*
# Constraint file should be placed in "constrs" folder.

# We will only be dealing with simulation for this lab. So we will need to
# create a simulation set. *Note that, for assignment, I will specify the
# exact simulation set's name, you need to name your simulation sets to be
# the exact name I specified in the assignment*

# Right click anywhere on "Sources" window, and choose "Edit simulation
# Sets ...": [[file:pics/edit_simulation_set.png]]

# Then click on the drop down menu and choose "Create Simulation Set ..."

# #+CAPTION: create\_simulation\_set
# [[file:pics/create_simulation_set_marked.png]]

# We will name the simulation set as "halfadder\_test". *Note: there
# cannot be space in any simulation set's name*. Since we are going to use
# this simulation, we will mark this simulation set as *active*. (You can
# also do this in Sources window by right clicking a non-active simulation
# set, and choose "make active" from the menu)

# #+CAPTION: make\_active
# [[file:pics/edit_simulation_set_make_active_marked.png]]

# To add a file click on the "Add Files" button in the same window, browse
# and select desired file. However, do make sure *UNCHECK the "copy
# sources into project" option*.

# #+CAPTION: add\_files\_no\_copy
# [[file:pics/add_files_uncheck.png]]

# In the same window, you can also create file. However, do make sure you
# *specify the file location*. Otherwise, Vivado will automatically store
# it in a location that will not be tracked by git.

# #+CAPTION: choose\_location
# [[file:pics/create_file_choose_location.png]]

# The location must be the "src" directory inside your assignment folder

# #+CAPTION: file\_location
# [[file:pics/file_location.png]]

# This what it looks like after adding a file and creating a file, not
# that they both in "src" directory:

# #+CAPTION: files\_added\_and\_created
# [[file:pics/files_added_and_created.png]]

# Whenever you are creating a file with Vivado, the following window will
# pop up and asking you to specify inputs and outputs. Skip this window,
# we will type in inputs and outputs manually.

# #+CAPTION: skip IO
# [[file:pics/create_file_IO_spec.png]]

# At the end, you will see the files we added and created will show up in
# "Sources" window and under halfadder\_test.

# #+CAPTION: added\_and\_created
# [[file:pics/added_and_created.png]]

# *** Simulation
#     :PROPERTIES:
#     :CUSTOM_ID: simulation
#     :END:

# Click on run simulation, and here is the default layout:

# #+CAPTION: default\_layout
# [[file:pics/simulation_default_layout.png]]

# Click on "zoom fit" to have the best view of your timing diagram

# #+CAPTION: zoom\_fit
# [[file:pics/zoom_fit_marked.png]]
